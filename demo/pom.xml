<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.jboss.jdf.examples</groupId>
	<artifactId>ticket-monster</artifactId>
	<version>2.1.3-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>ticket-monster</name>

	<description>A starter HTML5 + REST webapp project for use on JBoss AS 7, generated from the jboss-javaee6-poh5-webapp archetype</description>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following 
			message: -->
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- Timestamp format for the maven.build.timestamp property -->
		<!-- You can reference property in pom.xml or filtered resources (must 
			enable third-party plugin if using Maven < 2.1) -->
		<maven.build.timestamp.format>yyyyMMdd'T'HHmmss</maven.build.timestamp.format>
		<!-- Define the version of JBoss' Java EE 6 APIs and Tools we want to import. -->
		<!-- <jboss.bom.version>1.0.0.M10</jboss.bom.version> -->
		<!-- Alternatively, comment out the above line, and un-comment the line 
			below to use version 1.0.0.M10-redhat-1 which is a release certified to work 
			with JBoss EAP 6. It requires you have access to the JBoss EAP 6 maven repository. -->
		<jboss.bom.version>1.0.7.CR1</jboss.bom.version>
		<buildhelper.plugin.version>1.7</buildhelper.plugin.version>

		<!-- Testing -->
		<version.arquillian.core>1.0.3.Final</version.arquillian.core>
		<version.arquillian.drone>1.2.0.Alpha2</version.arquillian.drone>
		<version.jbossas>7.1.1.Final</version.jbossas>
		<jbossas.home>${project.build.directory}/jboss-as-${version.jbossas}</jbossas.home>
	</properties>

	<repositories>
		<repository>
			<id>saucelabs-repository</id>
			<url>https://repository-saucelabs.forge.cloudbees.com/release</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencyManagement>
		<dependencies>
			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-javaee-6.0-with-tools stack (you can 
				read this as the JBoss stack of the Java EE 6 APIs, with some extras tools 
				for your project, such as Arquillian for testing), the jboss-javaee-6.0-with-hibernate 
				stack (you can read this as the JBoss stack of the Java EE 6 APIs, with extras 
				from the Hibernate family of projects) and the jboss-javaee-6.0-with-errai 
				stack (you can read this as the JBoss stack of the Java EE 6 APIs, with support 
				for Errai) -->

			<!-- <dependency> -->
			<!-- <groupId>org.jboss.bom</groupId> -->
			<!-- <artifactId>jboss-javaee-6.0-with-tools</artifactId> -->
			<!-- <version>${jboss.bom.version}</version> -->
			<!-- <type>pom</type> -->
			<!-- <scope>import</scope> -->
			<!-- </dependency> -->
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-hibernate</artifactId>
				<version>${jboss.bom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-errai</artifactId>
				<version>${jboss.bom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-infinispan</artifactId>
				<version>${jboss.bom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- Arquillian dependencies -->
			<dependency>
				<groupId>org.jboss.arquillian</groupId>
				<artifactId>arquillian-bom</artifactId>
				<version>${version.arquillian.core}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- First declare the APIs we depend on and need for compilation. All 
			of them are provided by JBoss AS 7 -->

		<!-- Import the CDI API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Common Annotations API (JSR-250), we use provided scope 
			as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JAX-RS API, we use provided scope as the API is included 
			in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JPA API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the EJB API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Servlet API, we use provided scope as the API is included 
			in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JSF API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.faces</groupId>
			<artifactId>jboss-jsf-api_2.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- The next set of dependencies are for Errai, which we use for the TicketMonster 
			booking monitor -->
		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>errai-bus</artifactId>
			<exclusions>
				<exclusion>
					<groupId>javax.inject</groupId>
					<artifactId>javax.inject</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.annotation</groupId>
					<artifactId>jsr250-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>errai-ioc</artifactId>
			<exclusions>
				<exclusion>
					<groupId>javax.inject</groupId>
					<artifactId>javax.inject</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.annotation</groupId>
					<artifactId>jsr250-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>errai-tools</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mvel</groupId>
			<artifactId>mvel2</artifactId>
		</dependency>

		<!-- CDI/ Errai Integration Modules -->
		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>errai-cdi-client</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>errai-javax-enterprise</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.errai</groupId>
			<artifactId>errai-weld-integration</artifactId>
			<exclusions>
				<exclusion>
					<groupId>
                        org.jboss.weld.servlet
                    </groupId>
					<artifactId>weld-servlet-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.jboss.errai</groupId>
					<artifactId>errai-cdi-jetty</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-user</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-dev</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Now we declare any tools needed -->

		<!-- Annotation processor to generate the JPA 2.0 metamodel classes for 
			typesafe criteria queries -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
			<version>4.10</version>
		</dependency>

		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA) 
			JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-depchain</artifactId>
			<type>pom</type>
			<scope>test</scope>
			<version>1.0.0-beta-7</version>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>1.8.1</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-core</artifactId>
		</dependency>
	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name 
			given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<pluginManagement>

			<plugins>
				<!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation 
					processors -->
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.3.1</version>
					<configuration>
						<source>1.6</source>
						<target>1.6</target>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.1.1</version>
					<configuration>
						<!-- We must exclude GWT client local classes from the deployment, 
							or classpath scanners such as Hibernate and Weld get confused when the webapp 
							is bootstrapping. -->
						<packagingExcludes>**/javax/**/*.*,**/client/local/**/*.class</packagingExcludes>
						<archive>
							<manifestEntries>
								<Dependencies>org.jboss.as.naming,org.jboss.as.server,org.jboss.msc</Dependencies>
							</manifestEntries>
						</archive>
					</configuration>
				</plugin>

				<!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
				<!-- To use run: mvn package jboss-as:deploy -->
				<plugin>
					<groupId>org.jboss.as.plugins</groupId>
					<artifactId>jboss-as-maven-plugin</artifactId>
					<version>7.3.Final</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>2.4.1</version>
					<configuration>
						<filesets>
							<fileset>
								<directory>.errai</directory>
								<includes>
									<include>**</include>
								</includes>
							</fileset>
						</filesets>
					</configuration>
				</plugin>
				<!-- m2e (Maven integration for Eclipse) requires the following configuration -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>gwt-maven-plugin</artifactId>
										<versionRange>[2.3.0,)</versionRange>
										<goals>
											<goal>resources</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- GWT plugin to compile client-side java code to javascript and to 
				run GWT development mode -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
				<version>2.4.0</version>
				<configuration>
					<inplace>true</inplace>
					<logLevel>INFO</logLevel>
					<extraJvmArgs>-Xmx512m</extraJvmArgs>
					<draftCompile>true</draftCompile>
					<!-- Configure GWT's development mode (formerly known as hosted mode) 
						to not start the default server (embedded jetty), but to download the HTML 
						host page from the configured runTarget. -->
					<noServer>true</noServer>
					<runTarget>http://localhost:8080/ticket-monster/booking-monitor.html</runTarget>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>resources</goal>
							<goal>compile</goal>
						</goals>
					</execution>
					<execution>
						<id>gwt-clean</id>
						<phase>clean</phase>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>integration-tests</id>
			<activation>
				<property>
					<name>integration</name>
				</property>
			</activation>
			<properties>
				<integration.test.source>src/test/integration</integration.test.source>
				<arquillian.drone.browser>firefox</arquillian.drone.browser>
				<arquillian.drone.reusable>false</arquillian.drone.reusable>
				<integration.test.pattern>**/**/IT*.java</integration.test.pattern>
			</properties>
			<dependencies>
				<dependency>
					<groupId>org.jboss.arquillian.graphene</groupId>
					<artifactId>graphene-webdriver</artifactId>
					<type>pom</type>
					<scope>test</scope>
					<version>2.0.0.Alpha4</version>
				</dependency>
			</dependencies>
			<build>
				<testResources>
					<testResource>
						<directory>src/test/resources</directory>
						<filtering>true</filtering>
					</testResource>
				</testResources>
				<plugins>
					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>prepare-application</id>
								<phase>validate</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.jboss.jdf.examples</groupId>
											<artifactId>ticket-monster</artifactId>
											<version>${project.version}</version>
											<type>war</type>
											<destFileName>ticket-monster.war</destFileName>
										</artifactItem>
									</artifactItems>
									<outputDirectory>target</outputDirectory>
									<overWriteIfNewer>false</overWriteIfNewer>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-integration-test-sources</id>
								<phase>process-test-sources</phase>
								<goals>
									<goal>add-test-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>${integration.test.source}</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<executions>
							<execution>
								<id>default-test</id>
								<configuration>
									<skipTests>true</skipTests>
									<test>${test}</test>
									<excludes>
										<exclude>${integration.test.pattern}</exclude>
									</excludes>
								</configuration>
							</execution>
							<execution>
								<id>integration-tests</id>
								<phase>verify</phase>
								<goals>
									<goal>test</goal>
								</goals>
								<configuration>
									<test>${test}</test>
									<includes>
										<include>${integration.test.pattern}</include>
									</includes>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>saucelabs</id>
			<dependencies>
				<!-- Sauce labs support for Drone -->
				<dependency>
					<groupId>com.saucelabs</groupId>
					<artifactId>arquillian-sauce-drone</artifactId>
					<version>0.0.4</version>
					<scope>test</scope>
					<exclusions>
						<exclusion>
							<groupId>org.jboss.arquillian.extension</groupId>
							<artifactId>arquillian-drone-selenium</artifactId>
						</exclusion>
					</exclusions>
				</dependency>

				<dependency>
					<groupId>org.jboss.arquillian.extension</groupId>
					<artifactId>arquillian-drone-selenium</artifactId>
					<version>1.2.0.Alpha2</version>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<!-- <plugin> -->
					<!-- <artifactId>maven-resources-plugin</artifactId> -->
					<!-- <executions> -->
					<!-- <execution> -->
					<!-- <id>copy-resources</id> -->
					<!-- <phase>validate</phase> -->
					<!-- <goals> -->
					<!-- <goal>copy-resources</goal> -->
					<!-- </goals> -->
					<!-- <configuration> -->
					<!-- <outputDirectory>${basedir}/src/test/resources</outputDirectory> -->
					<!-- <overwrite>true</overwrite> -->
					<!-- <resources> -->
					<!-- <resource> -->
					<!-- <directory>${basedir}/src/test/resources/saucelabs/</directory> -->
					<!-- <filtering>true</filtering> -->
					<!-- </resource> -->
					<!-- </resources> -->
					<!-- </configuration> -->
					<!-- </execution> -->
					<!-- </executions> -->
					<!-- </plugin> -->
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<systemProperties>
								<arquillian.xml>src/test/resources/saucelabs/arquillian.xml</arquillian.xml>
							</systemProperties>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>browser-phantomjs</id>
			<activation>
				<property>
					<name>browser</name>
					<value>phantomjs</value>
				</property>
			</activation>
			<properties>
				<arquillian.drone.browser>phantomjs</arquillian.drone.browser>
			</properties>
		</profile>
		<profile>
			<id>browser-chrome</id>
			<activation>
				<property>
					<name>browser</name>
					<value>chrome</value>
				</property>
			</activation>
			<properties>
				<arquillian.drone.browser>chrome</arquillian.drone.browser>
			</properties>
		</profile>
		<profile>
			<id>browser-firefox</id>
			<activation>
				<property>
					<name>browser</name>
					<value>firefox</value>
				</property>
			</activation>
			<properties>
				<arquillian.drone.browser>firefox</arquillian.drone.browser>
			</properties>
		</profile>
		<profile>
			<id>browser-remote-reusable</id>
			<activation>
				<property>
					<name>reusable</name>
				</property>
			</activation>
			<properties>
				<arquillian.drone.reusable>true</arquillian.drone.reusable>
			</properties>
		</profile>

		<profile>
			<id>arq-jbossas-managed</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-managed</artifactId>
					<scope>test</scope>
					<version>7.1.3.Final</version>
					<exclusions>
						<exclusion>
							<groupId>org.jboss.shrinkwrap.resolver</groupId>
							<artifactId>shrinkwrap-resolver-impl-maven</artifactId>
						</exclusion>
					</exclusions>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>unpack-jbossas</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.jboss.as</groupId>
											<artifactId>jboss-as-dist</artifactId>
											<version>${version.jbossas}</version>
											<type>zip</type>
											<overWrite>false</overWrite>
											<outputDirectory>${project.build.directory}</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<environmentVariables>
								<JBOSS_HOME>${jbossas.home}</JBOSS_HOME>
							</environmentVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in a remote 
				JBoss AS instance -->
			<!-- Run with: mvn clean test -Parq-jbossas-remote -->
			<id>arq-jbossas-remote</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-remote</artifactId>
					<version>7.1.3.Final</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- An optional profile that -->
			<id>postgresql-openshift</id>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources-postgresql-openshift</directory>
					</resource>
					<resource>
						<directory>src/main/resources</directory>
						<includes>
							<include>**/*</include>
						</includes>
						<excludes>
							<exclude>META-INF/*</exclude>
						</excludes>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.4.3</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional profile that enables a server managed postgresql data 
				source -->
			<id>postgresql</id>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources-postgresql</directory>
					</resource>
					<resource>
						<directory>src/main/resources</directory>
						<includes>
							<include>**/*</include>
						</includes>
						<excludes>
							<exclude>META-INF/*</exclude>
						</excludes>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.4.3</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
</project>
